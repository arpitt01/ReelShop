
{%- assign limit = section.settings.limit | default: 10 -%}
{%- assign intent = section.settings.intent | default: 'related' -%}
{%- comment -%}
  Use current product if available, else use the manual_product setting (homepage).
{%- endcomment -%}
{% if product %}
  {% assign current_product = product %}
{% elsif section.settings.manual_product != blank %}
  {% assign current_product = all_products[section.settings.manual_product] %}
{% endif %}

{%- assign rendered_any = false -%}
<div class="sv-reels-tray" role="region" aria-label="Shoppable Reels"
     data-section-id="{{ section.id }}"
     data-product-id="{{ current_product.id }}"
     data-limit="{{ limit }}"
     data-intent="{{ intent }}"
     data-product-tags="{{ current_product.tags | join: ',' | escape }}"
     data-collection-handles="{% for c in current_product.collections %}{{ c.handle }}{% unless forloop.last %},{% endunless %}{% endfor %}"
     data-vendor="{{ current_product.vendor | escape }}"
     data-type="{{ current_product.type | escape }}"
     style="margin:28px 0">
  {% if block.settings.heading != blank %}
    <h3 class="sv-reels-title">{{ block.settings.heading }}</h3>
  {% endif %}

  <div class="sv-reels-row" id="sv-reels-row-{{ section.id }}">
    {%- for reel in shop.metaobjects.shop-reels.values -%}
      {%- assign p = reel.product.value -%}
      {%- if p and reel.video.value and p.id != current_product.id -%}  
        {%- assign rendered_any = true -%}
        <article class="sv-reel" data-reel-id="{{ reel.id }}" data-product-id="{{ p.id }}"
          data-tags="{{ p.tags | join: ',' | escape }}"
          data-collections="{% for c in p.collections %}{{ c.handle }}{% unless forloop.last %},{% endunless %}{% endfor %}"
          data-vendor="{{ p.vendor | escape }}" data-type="{{ p.type | escape }}">
          <div class="sv-reel-media" 
          onclick="openShoppableVideoDialog('{{ reel.video.value | video_tag: autoplay: true, loop: true, muted: false, playsinline: true | escape }}', 
          {
            id: '{{ reel.product.value.id }}',
            handle: '{{ reel.product.value.handle }}',
            image: '{{ reel.product.value.featured_image | img_url: '400x' }}',
            title: '{{ reel.product.value.title | escape }}',
            price: '{{ reel.product.value.price | money }}',
            compareAtPrice: '{{ reel.product.value.compare_at_price | money }}',
            vendor: '{{ reel.product.value.vendor | escape }}',
            description: `{{ reel.product.value.description |  escape }}`,
            url: '{{ reel.product.value.url }}',
            variants: [
              {% for v in reel.product.value.variants %}
                {
                  id: '{{ v.id }}',
                  title: '{{ v.title | escape }}',
                  price: '{{ v.price | money }}',
                  compareAtPrice: '{{ v.compare_at_price | money }}',
                  available: {{ v.available | json }},
                  sku: '{{ v.sku | escape }}'
                }{% unless forloop.last %},{% endunless %}
              {% endfor %}
            ]
          },'{{ block.settings.add_to_cart_color }}','{{ block.settings.shop_now_color }}'
      )"
          >
            {{ reel.video.value | video_tag: loop: true, muted: true, playsinline: true, preload: "metadata" }}
          </div>
          {%- assign variant = p.selected_or_first_available_variant -%}
          <a href="{{ p.url }}" class="sv-reel-overlay" tabindex="0">
            <img src="{{ p.featured_image | image_url: width: 120 }}" alt="{{ p.title }}" class="sv-reel-overlay-img"/>
            <div class="sv-reel-overlay-details">
              <div class="sv-reel-overlay-title">{{ p.title }}</div>
              <div class="sv-reel-overlay-prices">
                <span class="sv-reel-overlay-price">{{ variant.price | money }}</span>
                {% if variant.compare_at_price > variant.price %}
                  <span class="sv-reel-overlay-compare">{{ variant.compare_at_price | money }}</span>
                {% endif %}
              </div>
            </div>
          </a>
        </article>
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

{%- unless rendered_any -%}
  <style>
    .sv-reels-tray[data-section-id="{{ section.id }}"] { display:none; }
  </style>
{%- endunless -%}

<!-- Include reusable dialog -->
{% render 'shoppable-video-dialog' %}

<style>
.sv-reels-title{
  font-size:{{block.settings.heading_font_size}}px;font-weight:600;margin:0 0 20px;
}
.sv-reels-row{
  display:flex;gap:14px;overflow-x:auto;padding:6px 2px;
  scroll-snap-type:x mandatory;-webkit-overflow-scrolling:touch;
}
.sv-reels-row::-webkit-scrollbar{ display:none; }
.sv-reel{
  flex:0 0 auto; min-width:220px; max-width:260px; box-sizing:border-box;
  background:#fff; border-radius:14px; overflow:hidden;
  box-shadow:0 2px 10px rgba(0,0,0,.09); scroll-snap-align:start;
  display: flex; flex-direction: column; justify-content: flex-start;
  position:relative;
}
.sv-reel-media{
  width:100%; aspect-ratio:9/16;
  background: #efefef; position:relative;
  overflow:hidden; border-radius:14px 14px 0 0;
  display: flex; align-items: stretch; justify-content: center;
}
.sv-reel-media video{
  width:100%; height:100%; display:block; object-fit:cover;
  border-radius:14px 14px 0 0;
}

.sv-reel-overlay{
  display: flex; align-items: center; gap: 8px;
  padding: 10px 10px 10px 6px; background: #fff;
  border-radius: 0 0 14px 14px; box-shadow:0 2px 10px rgba(0,0,0,.03);
  width: 100%; text-decoration: none; color: inherit; min-height:65px;
  border-top: 1px solid #f2f2f2; position:relative; z-index:1;
  margin-top: 0;
}
.sv-reel-overlay-img{
  width:50px; height:50px; object-fit:cover; border-radius:8px;
  background:#e9e9e9; flex-shrink:0;
  object-position: top;
}
.sv-reel-overlay-details{ flex:1; min-width:0; }
.sv-reel-overlay-title{
  font-size:13px; font-weight:500; margin:0 0 4px; color:#111;
  white-space:nowrap; overflow:hidden; text-overflow:ellipsis;
}
.sv-reel-overlay-prices{
  display:flex; align-items:center; gap:1px; font-size:12px;flex-wrap: wrap;
  
}
.sv-reel-overlay-price{ font-weight:600; color:#111; }
.sv-reel-overlay-compare{ text-decoration:line-through; color:#999; font-size:10px; }
@media (max-width:768px){
  .sv-reel{ min-width:155px; max-width:175px; }
  .sv-reel-overlay-img{ width:40px; height:40px; object-position: top; }
  .sv-reel-overlay{ min-height:48px; font-size:11px; padding:7px 7px 7px 5px; }
}
</style>

<script>
(function(){
  const tray = document.querySelector('.sv-reels-tray[data-section-id="{{ section.id }}"]');
  if(!tray) return;

  const row = document.getElementById('sv-reels-row-{{ section.id }}');
  const allCards = Array.from(row.querySelectorAll('.sv-reel'));
  if(allCards.length === 0){ tray.style.display = 'none'; return; }

  const productId = tray.dataset.productId;
  const limit = parseInt(tray.dataset.limit || '10', 10);
  const intent = tray.dataset.intent || 'related';

  const isProductPage = !!{{ product.id | default: "null" }};
  function similarityScore(card){
    const baseTags = (tray.dataset.productTags || '').split(',').filter(Boolean);
    const baseCols = (tray.dataset.collectionHandles || '').split(',').filter(Boolean);
    const baseVendor = tray.dataset.vendor || '';
    const baseType = tray.dataset.type || '';

    const tags = (card.dataset.tags || '').split(',').filter(Boolean);
    const cols = (card.dataset.collections || '').split(',').filter(Boolean);
    let score = 0;
    score += cols.filter(h => baseCols.includes(h)).length * 2;
    score += tags.filter(t => baseTags.includes(t)).length;
    if(card.dataset.vendor === baseVendor) score += 1;
    if(card.dataset.type === baseType) score += 1;
    return score;
  }

  function applyOrder(ordered){
    row.innerHTML = '';
    const chosen = ordered.slice(0, limit);
    if(chosen.length === 0){ tray.style.display = 'none'; return; }
    chosen.forEach(el => row.appendChild(el));
    setupVisibilityAutoplay();
  }

  function setupVisibilityAutoplay(){
    const videos = row.querySelectorAll('video');
    const observer = new IntersectionObserver((entries)=>{
      entries.forEach(({target, isIntersecting}) => {
        if(isIntersecting){
          target.muted = true; target.playsInline = true;
          target.play().catch(()=>{});
        }else{
          target.pause();
        }
      });
    }, { root: row, threshold: 0.6 });
    videos.forEach(v => observer.observe(v));
  }

  if(isProductPage){
    const recUrl = `/recommendations/products.json?product_id=${encodeURIComponent(productId)}&intent=${encodeURIComponent(intent)}&limit=${encodeURIComponent(limit*3)}`;
    fetch(recUrl)
      .then(r => r.ok ? r.json() : Promise.reject(r.status))
      .then(data => {
        const recIds = ((data && data.products) ? data.products : []).map(p => String(p.id));
        const ordered = [];
        recIds.forEach(id => {
          const match = allCards.find(c => c.dataset.productId === id);
          if(match) ordered.push(match);
        });
        allCards.forEach(c => { if(!ordered.includes(c)) ordered.push(c); });
        if(recIds.length === 0){
          const fallback = allCards.slice().sort((a,b) => similarityScore(b) - similarityScore(a));
          applyOrder(fallback);
        }else{
          applyOrder(ordered);
        }
      })
      .catch(() => {
        const fallback = allCards.slice().sort((a,b) => similarityScore(b) - similarityScore(a));
        applyOrder(fallback);
      });
  }else{
    const fallback = allCards.slice(0, limit);
    applyOrder(fallback);
  }
})();
</script>

{% schema %}
{
  "name": "Product Reels",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recommended Reels"
    },
    {
      "type": "range",
      "id": "heading_font_size",
      "label": "Heading Font Size (px)",
      "min": 14,
      "max": 36,
      "step": 1,
      "default": 22
    },
    {
      "type": "color",
      "id": "add_to_cart_color",
      "label": "Add to Cart Button Color",
      "default": "#e91e63"
    },
    {
      "type": "color",
      "id": "shop_now_color",
      "label": "Shop Now Button Color",
      "default": "#008060"
    }
  ]
}
{% endschema %}
